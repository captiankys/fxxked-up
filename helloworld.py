# #파이썬의 print문에서의 합치기는 = 혹은 , 이지만 ,의 경우에는 띄어쓰기가 한 칸 들어가게 됨
# '''으로 여러문장의 주석처리를 하는것이 가능함'''
# #control slash를 이용하면 쓰고 나서도 주석처리를 하는 것이 가능함
# #연산자의 경우에는 print문에서 설정하는 것이 가능함
# # //의 경우에는 몫을 구해는 역할임
# # /의 경우에는 그냥 나누기 역할인데 변수의 정수, 실수 의 여부에 따라서 갈라질 것이라고 예상하고 있음
# # **의 경우에는 제곱연산임
# # and 연산자와 & 의 경우에는 완전히 기능이 동일하고. 두가지 조건을 만족시키는 경우에만 성립하는 조건임
# # or 연산자와 |의 경우에는 기능이 동일하고 두가지 조건 중에서 하나만 만족시키더라도 true를 출력함
# num=1
# num=num+4 #이거를 간단하게 쓰려면 num+=4 로 간단하게 쓰는것이 가능하다는 점이 신박하거든요
# print(num)# 이러면 5가 출력됨

# print(abs(-5))#abs의 경우에는 절댓값을 출력하고
# #pow의 경우에는 제곱수를 출력하게 됨
# #max min의 경우에는 최대 최소를 구하고
# #round는 반올림/내림
# #라이브러리를 이용하는 방법은
# # from math import *
# # 으로 라이브러리를 추가함
# # from random import *
# # print(int random()*45 + 1)#1에서 46미만의 임의의 값을 생성
# # print(randrange(1,46))#1에서 46미만의 임의의 값을 생성
# # print(randint(1,45))

# from random import *
# date = (randint(3,28))
# print("오프라인 스터디 모임 날짜는 매월" + str(date) + "일로 선정되었습니다/")

# idnum = "124123424123"

# print(idnum[6]) #이러면 0부터 6까지
# print(idnum[0:2]) #0부터 2직전까지 그러니까 0부터 1까지만 출력한다는 것임
# #앞을 비우거나 뒤를 비우면 처음부터 끝까지임
# #뒤에서 부터 출력하려면 -를 붙여서 진행하면 거꾸로 출력함

# 문자열 처리함수
# python = "python is Amazing"
# #lower upper로 소문자와 대문자로 가능함
# #isupper를 통해서 특정 위치의 문자열이 대문자인지 소문자인지 확인하는 것이 가능함
# #len을 통해서 문자열의 길이를 측정하는 것이 가능하다는 점
# #python.replace를 이용해서 문자열 안에서 내용을 바꾸는 것이 가능함
# #index를 이용해서 문자열의 위치를 계산하는 것이 가능하며, +1을 해주면 완벽함
# #find를 이용해서 문자열 안의 단어나 철자를 찾는것이 가능함
# #find에서는 없으면 -1, index의 경우에는 작동하지 않음

# 문자열 포맷
# print("나는 %d살입니다" %20)
# print("나는 %s를 좋아해요" %s)#이런식으로 dsc로 사용하는것이 가능함
# #두가지를 입력하는 경우에는 %("파랑" , "빨강") 의 형식으로 사용하는 것이 가능함
# #{}를 이용한다면 format()이라는 함수를 이용해서 대신 입력하는 것이 가능함
# #중괄호 안에 숫자를 입력한다면 입력받은 배열의 순서를 바꾸는것이 가능함
# #아예 변수를 만들어서 중괄호 안에 변수 이름. format문 안에 변수를 선언한다면 그것또한 실행가능함
# #age= 20
# # color ="빨강"
# # print(f"나는 {age}살이며 ,{color}색을 좋아해요.")
# # 의 방식으로도 활용하는 것이 가능함

# # \n 으로 치면 구문이 줄 띄어지는건데 이걸 모르는건 무자식아니냐
# # \를 활용해서 "의 활용을 다르게 하는 것이 가능함
# # \r 커서를 맨 앞으로 이동 그래서 그 위치에 있는 문자는 덮어쓰기 처리로 삭제됨
# # \b 한글자 지우기

# # url = "https://naver.com"
# # my_str = url.replace("https://","")
# # my_str = my_str[:my_str.index(".")]#처음부터 . 이전까지만 출력하는것이 가능함
# # password = my_str[:3]+ str(len(my_str)) +str(my_str.count("e")) +"!"
# # print("{0} 의 비밀번호는 {1} 입니다" format(url, password))

# # #리스트는 순서를 가지는 객체들의 집합을 의미하는 말로 객체를 한군데에 묶어주는 형식임
# # print(subway.index("하하")+1)을 이용해서 위치를 찾는 것이 가능하며
# # subway.append/insert의 방식으로 추가가 가능하나 insert(1, "객체이름")으로 실행함
# # subway.pop()으로 뒤에서부터 한명을 제외하는 기능임
# # subway.count으로 같은 값의 개수를 측정가능함
# # numlist= [1,2,4,5,6]
# # numlist.sort으로 정렬하는것이 가능함
# # reverse으로 순서를 뒤집고, clear를 이용해서 내용을 지우는 것이 가능함
# # 또한 리스트의 경우에는 자료형을 섞는것 또한 가능함

# # 사전
# cab= {3:"유재석"} #이러면 3번 키의 벨류는 유재석이고 cab이 딕셔너리의 역할을 함
# print(cab[3]) #이러면 바로 유재석을 출력함
# print(cab.get[5])#이러면 none이라는 값을 출력하지만 get을 사용하지 않으면 오류가 발생해 사용되지 않음
# print(3 in cab) #딕셔너리에 값이 있는지 없는지를 확인해주는것이 가느앟ㅁ
# can["20"]= "조세호" #이러면 20이라는 값에 조세호라는 결과가 저장되는 것임
# del cab[3]을 이용하면 키와 벨류를 전부 삭제하는 것이 가능함
# #print(cab.keys/values)
# #cab.clear()
# # 튜플은 변경이 되지 않는 리스트라고 생각하면 됨
# # 말 그대로 영구적인 목록에 사용함 속도가 빠르다는 장점이 있음
# #set 집합
# #중복 안됨 순서가 없음
# s1= {1,2,34,4,4,4,4}
# print(s1)
# # 이러면 1,2,34,4만 출력된다는 점임
# # 교집합을 출력하는 방법
# print(A&B) 의 형식으로 진행한다면 교집합 intersection으로 사용함
# print(a|b) 의 형식으로 진행한다면 합집합 union으로도 사용
# print(a-b) difference를 이용한다면 차집합
# add를 이용해서 집합안에 추가하는 것이 가능함

# #자료구조의 변경
# menu ={ "커피", "우유"," 주스"}
# menu =  list(menu)#리스트 형식으로 바뀌게 되는 형식임

# print(memu, type(menu))
# print()
# import random as r
# #내가 저지른 실수는 중괄호는 문자열/ 변경이 불가능한 튜플임에도 불구하고 계속해서 코딩한 점
# idlist = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] 
# #range를 이용해서 적는 것 또한 가능하는 점
# #idlist = range(1,21)
# #idlist =  list(idlist)
# #아예 한번에 4명을 뽑아버리는 것 또한 방법임

# r.shuffle(idlist)
# chicken= r.randint(0,19)
# print("-- 당첨자 발표 --\n 치킨 당첨자 : {}".format(idlist[chicken]))
# idlist.remove(idlist[chicken])
# print("\n  커피 당첨자 : ", r.sample(idlist, 3))
# print("\n -- 축하합니다 --")

weather = int(imput("오늘 날씨는 어때요??"))
# 위의 형식으로 입력을 받아서 저장하는 것이 가능하다는 점임
# 반복문의 경우엔 for while문이 대표적으로 존재한다
for waiting in range(1,20,3): 
    # for 문의 경우에는 처음 끝 그리고 스텝으로 이루어져 있다 그래서 step을 조정해서 반복하는 것이 가능
    
    print("대기번호 : {}" .format(waiting))






